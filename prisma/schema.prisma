datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum PoloSize {
  XS
  S
  M
  L
  XL
  XXL
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  className     String
  passwordHash  String
  role          Role      @default(USER)
  subscribed    Boolean   @default(true)
  poloSize      PoloSize?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?

  // ðŸ‘‡ back-relation vers le token (optionnel, 1-1)
  emailVerificationToken EmailVerificationToken?

  notifications Notification[]
  newsReads     NewsRead[]
  paymentProofs PaymentProof[]
  messages      ContactMessage[]
}

model News {
  id        String    @id @default(cuid())
  title     String
  body      String
  kind      String
  startsAt  DateTime?
  createdAt DateTime  @default(now())

  reads  NewsRead[]
  notifs Notification[]
}

model NewsRead {
  id     String   @id @default(cuid())
  userId String
  newsId String
  readAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])

  @@unique([userId, newsId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime? 

  user User @relation(fields: [userId], references: [id])
  news News @relation(fields: [newsId], references: [id])
}

model PaymentProof {
  id        String   @id @default(cuid())
  userId    String
  amountCFA Int
  method    String // "depÃ´t" | "cash"
  reference String? // <-- le type manquait
  imageUrl  String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ContactMessage {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model Officer {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  role      String
}

model President {
  id       String @id @default(cuid())
  fullName String
  yearFrom Int
  yearTo   Int
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}
